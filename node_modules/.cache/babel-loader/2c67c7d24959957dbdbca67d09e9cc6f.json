{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RLP = exports.utils = exports.decode = exports.encode = void 0;\n/**\n * RLP Encoding based on https://eth.wiki/en/fundamentals/rlp\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/\nfunction encode(input) {\n  if (Array.isArray(input)) {\n    const output = [];\n    for (let i = 0; i < input.length; i++) {\n      output.push(encode(input[i]));\n    }\n    const buf = concatBytes(...output);\n    return concatBytes(encodeLength(buf.length, 192), buf);\n  }\n  const inputBuf = toBytes(input);\n  if (inputBuf.length === 1 && inputBuf[0] < 128) {\n    return inputBuf;\n  }\n  return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);\n}\nexports.encode = encode;\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */\nfunction safeSlice(input, start, end) {\n  if (end > input.length) {\n    throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds');\n  }\n  return input.slice(start, end);\n}\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */\nfunction decodeLength(v) {\n  if (v[0] === 0) {\n    throw new Error('invalid RLP: extra zeros');\n  }\n  return parseHexByte(bytesToHex(v));\n}\nfunction encodeLength(len, offset) {\n  if (len < 56) {\n    return Uint8Array.from([len + offset]);\n  }\n  const hexLength = numberToHex(len);\n  const lLength = hexLength.length / 2;\n  const firstByte = numberToHex(offset + 55 + lLength);\n  return Uint8Array.from(hexToBytes(firstByte + hexLength));\n}\nfunction decode(input) {\n  let stream = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (typeof input === 'undefined' || input === null || input.length === 0) {\n    return Uint8Array.from([]);\n  }\n  const inputBytes = toBytes(input);\n  const decoded = _decode(inputBytes);\n  if (stream) {\n    return decoded;\n  }\n  if (decoded.remainder.length !== 0) {\n    throw new Error('invalid RLP: remainder must be zero');\n  }\n  return decoded.data;\n}\nexports.decode = decode;\n/** Decode an input with RLP */\nfunction _decode(input) {\n  let length, llength, data, innerRemainder, d;\n  const decoded = [];\n  const firstByte = input[0];\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1)\n    };\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f;\n    // set 0x80 null to 0\n    if (firstByte === 0x80) {\n      data = Uint8Array.from([]);\n    } else {\n      data = safeSlice(input, 1, length);\n    }\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed');\n    }\n    return {\n      data,\n      remainder: input.slice(length)\n    };\n  } else if (firstByte <= 0xbf) {\n    // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n    // followed by the length, followed by the string\n    llength = firstByte - 0xb6;\n    if (input.length - 1 < llength) {\n      throw new Error('invalid RLP: not enough bytes for string length');\n    }\n    length = decodeLength(safeSlice(input, 1, llength));\n    if (length <= 55) {\n      throw new Error('invalid RLP: expected string length to be greater than 55');\n    }\n    data = safeSlice(input, llength, length + llength);\n    return {\n      data,\n      remainder: input.slice(length + llength)\n    };\n  } else if (firstByte <= 0xf7) {\n    // a list between 0-55 bytes long\n    length = firstByte - 0xbf;\n    innerRemainder = safeSlice(input, 1, length);\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(length)\n    };\n  } else {\n    // a list over 55 bytes long\n    llength = firstByte - 0xf6;\n    length = decodeLength(safeSlice(input, 1, llength));\n    if (length < 56) {\n      throw new Error('invalid RLP: encoded list too short');\n    }\n    const totalLength = llength + length;\n    if (totalLength > input.length) {\n      throw new Error('invalid RLP: total length is larger than the data');\n    }\n    innerRemainder = safeSlice(input, llength, totalLength);\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength)\n    };\n  }\n}\nconst cachedHexes = Array.from({\n  length: 256\n}, (_v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n  // Pre-caching chars with `cachedHexes` speeds this up 6x\n  let hex = '';\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += cachedHexes[uint8a[i]];\n  }\n  return hex;\n}\nfunction parseHexByte(hexByte) {\n  const byte = Number.parseInt(hexByte, 16);\n  if (Number.isNaN(byte)) throw new Error('Invalid byte sequence');\n  return byte;\n}\n// Caching slows it down 2-3x\nfunction hexToBytes(hex) {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex');\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    array[i] = parseHexByte(hex.slice(j, j + 2));\n  }\n  return array;\n}\n/** Concatenates two Uint8Arrays into one. */\nfunction concatBytes() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n  return result;\n}\nfunction utf8ToBytes(utf) {\n  return new TextEncoder().encode(utf);\n}\n/** Transform an integer into its hexadecimal value */\nfunction numberToHex(integer) {\n  if (integer < 0) {\n    throw new Error('Invalid integer as argument, must be unsigned!');\n  }\n  const hex = integer.toString(16);\n  return hex.length % 2 ? `0${hex}` : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n  return a.length % 2 ? `0${a}` : a;\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n  return str.length >= 2 && str[0] === '0' && str[1] === 'x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform anything into a Uint8Array */\nfunction toBytes(v) {\n  if (v instanceof Uint8Array) {\n    return v;\n  }\n  if (typeof v === 'string') {\n    if (isHexPrefixed(v)) {\n      return hexToBytes(padToEven(stripHexPrefix(v)));\n    }\n    return utf8ToBytes(v);\n  }\n  if (typeof v === 'number' || typeof v === 'bigint') {\n    if (!v) {\n      return Uint8Array.from([]);\n    }\n    return hexToBytes(numberToHex(v));\n  }\n  if (v === null || v === undefined) {\n    return Uint8Array.from([]);\n  }\n  throw new Error('toBytes: received unsupported type ' + typeof v);\n}\nexports.utils = {\n  bytesToHex,\n  concatBytes,\n  hexToBytes,\n  utf8ToBytes\n};\nexports.RLP = {\n  encode,\n  decode\n};","map":null,"metadata":{},"sourceType":"script"}