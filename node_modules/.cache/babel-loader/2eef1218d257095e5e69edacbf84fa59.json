{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nexport class PocketProvider extends UrlJsonRpcProvider {\n  static getApiKey(apiKey) {\n    const apiKeyObj = {\n      applicationId: null,\n      loadBalancer: true,\n      applicationSecretKey: null\n    };\n    // Parse applicationId and applicationSecretKey\n    if (apiKey == null) {\n      apiKeyObj.applicationId = defaultApplicationId;\n    } else if (typeof apiKey === \"string\") {\n      apiKeyObj.applicationId = apiKey;\n    } else if (apiKey.applicationSecretKey != null) {\n      apiKeyObj.applicationId = apiKey.applicationId;\n      apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n    } else if (apiKey.applicationId) {\n      apiKeyObj.applicationId = apiKey.applicationId;\n    } else {\n      logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n    }\n    return apiKeyObj;\n  }\n  static getUrl(network, apiKey) {\n    let host = null;\n    switch (network ? network.name : \"unknown\") {\n      case \"goerli\":\n        host = \"eth-goerli.gateway.pokt.network\";\n        break;\n      case \"homestead\":\n        host = \"eth-mainnet.gateway.pokt.network\";\n        break;\n      case \"kovan\":\n        host = \"poa-kovan.gateway.pokt.network\";\n        break;\n      case \"matic\":\n        host = \"poly-mainnet.gateway.pokt.network\";\n        break;\n      case \"maticmum\":\n        host = \"polygon-mumbai-rpc.gateway.pokt.network\";\n        break;\n      case \"rinkeby\":\n        host = \"eth-rinkeby.gateway.pokt.network\";\n        break;\n      case \"ropsten\":\n        host = \"eth-ropsten.gateway.pokt.network\";\n        break;\n      default:\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n    }\n    const url = `https:/\\/${host}/v1/lb/${apiKey.applicationId}`;\n    const connection = {\n      headers: {},\n      url\n    };\n    if (apiKey.applicationSecretKey != null) {\n      connection.user = \"\";\n      connection.password = apiKey.applicationSecretKey;\n    }\n    return connection;\n  }\n  isCommunityResource() {\n    return this.applicationId === defaultApplicationId;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}