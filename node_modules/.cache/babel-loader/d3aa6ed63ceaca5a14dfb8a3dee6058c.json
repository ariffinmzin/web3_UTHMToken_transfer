{"ast":null,"code":"\"use strict\";\n\n// This gets overridden by rollup\nconst exportWordlist = false;\nimport { id } from \"@ethersproject/hash\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nexport const logger = new Logger(version);\nexport class Wordlist {\n  constructor(locale) {\n    logger.checkAbstract(new.target, Wordlist);\n    defineReadOnly(this, \"locale\", locale);\n  }\n  // Subclasses may override this\n  split(mnemonic) {\n    return mnemonic.toLowerCase().split(/ +/g);\n  }\n  // Subclasses may override this\n  join(words) {\n    return words.join(\" \");\n  }\n  static check(wordlist) {\n    const words = [];\n    for (let i = 0; i < 2048; i++) {\n      const word = wordlist.getWord(i);\n      /* istanbul ignore if */\n      if (i !== wordlist.getWordIndex(word)) {\n        return \"0x\";\n      }\n      words.push(word);\n    }\n    return id(words.join(\"\\n\") + \"\\n\");\n  }\n  static register(lang, name) {\n    if (!name) {\n      name = lang.locale;\n    }\n    /* istanbul ignore if */\n    if (exportWordlist) {\n      try {\n        const anyGlobal = window;\n        if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n          if (!anyGlobal._ethers.wordlists[name]) {\n            defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n          }\n        }\n      } catch (error) {}\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}