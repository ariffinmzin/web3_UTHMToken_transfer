{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.schnorr = exports.Signature = exports.Point = exports.CURVE = exports.utils = exports.getSharedSecret = exports.recoverPublicKey = exports.verify = exports.signSync = exports.sign = exports.getPublicKey = void 0;\nconst hmac_1 = require(\"@noble/hashes/hmac\");\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst secp256k1_1 = require(\"@noble/secp256k1\");\nvar secp256k1_2 = require(\"@noble/secp256k1\");\nObject.defineProperty(exports, \"getPublicKey\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.getPublicKey;\n  }\n});\nObject.defineProperty(exports, \"sign\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.sign;\n  }\n});\nObject.defineProperty(exports, \"signSync\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.signSync;\n  }\n});\nObject.defineProperty(exports, \"verify\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.verify;\n  }\n});\nObject.defineProperty(exports, \"recoverPublicKey\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.recoverPublicKey;\n  }\n});\nObject.defineProperty(exports, \"getSharedSecret\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.getSharedSecret;\n  }\n});\nObject.defineProperty(exports, \"utils\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.utils;\n  }\n});\nObject.defineProperty(exports, \"CURVE\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.CURVE;\n  }\n});\nObject.defineProperty(exports, \"Point\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.Point;\n  }\n});\nObject.defineProperty(exports, \"Signature\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.Signature;\n  }\n});\nObject.defineProperty(exports, \"schnorr\", {\n  enumerable: true,\n  get: function () {\n    return secp256k1_2.schnorr;\n  }\n});\n// Enable sync API for noble-secp256k1\nsecp256k1_1.utils.hmacSha256Sync = function (key) {\n  const h = hmac_1.hmac.create(sha256_1.sha256, key);\n  for (var _len = arguments.length, messages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    messages[_key - 1] = arguments[_key];\n  }\n  messages.forEach(msg => h.update(msg));\n  return h.digest();\n};","map":null,"metadata":{},"sourceType":"script"}