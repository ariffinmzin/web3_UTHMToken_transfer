{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AccessListEIP2930Transaction = void 0;\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst baseTransaction_1 = require(\"./baseTransaction\");\nconst util_2 = require(\"./util\");\nconst TRANSACTION_TYPE = 1;\nconst TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\nclass AccessListEIP2930Transaction extends baseTransaction_1.BaseTransaction {\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  constructor(txData) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super({\n      ...txData,\n      type: TRANSACTION_TYPE\n    }, opts);\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n    this.DEFAULT_HARDFORK = 'berlin';\n    const {\n      chainId,\n      accessList,\n      gasPrice\n    } = txData;\n    this.common = this._getCommon(opts.common, chainId);\n    this.chainId = this.common.chainId();\n    // EIP-2718 check is done in Common\n    if (!this.common.isActivatedEIP(2930)) {\n      throw new Error('EIP-2930 not enabled on Common');\n    }\n    this.activeCapabilities = this.activeCapabilities.concat([2718, 2930]);\n    // Populate the access list fields\n    const accessListData = util_2.AccessLists.getAccessListData(accessList ?? []);\n    this.accessList = accessListData.accessList;\n    this.AccessListJSON = accessListData.AccessListJSON;\n    // Verify the access list format.\n    util_2.AccessLists.verifyAccessList(this.accessList);\n    this.gasPrice = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(gasPrice === '' ? '0x' : gasPrice));\n    this._validateCannotExceedMaxInteger({\n      gasPrice: this.gasPrice\n    });\n    baseTransaction_1.BaseTransaction._validateNotArray(txData);\n    if (this.gasPrice * this.gasLimit > util_1.MAX_INTEGER) {\n      const msg = this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER');\n      throw new Error(msg);\n    }\n    this._validateYParity();\n    this._validateHighS();\n    if (this.common.isActivatedEIP(3860)) {\n      (0, util_2.checkMaxInitCodeSize)(this.common, this.data.length);\n    }\n    const freeze = opts?.freeze ?? true;\n    if (freeze) {\n      Object.freeze(this);\n    }\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n  static fromTxData(txData) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new AccessListEIP2930Transaction(txData, opts);\n  }\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   */\n  static fromSerializedTx(serialized) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n      throw new Error(`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${serialized.slice(0, 1).toString('hex')}`);\n    }\n    const values = (0, util_1.arrToBufArr)(rlp_1.RLP.decode(Uint8Array.from(serialized.slice(1))));\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array');\n    }\n    return AccessListEIP2930Transaction.fromValuesArray(values, opts);\n  }\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   */\n  static fromValuesArray(values) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (values.length !== 8 && values.length !== 11) {\n      throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');\n    }\n    const [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values;\n    this._validateNotArray({\n      chainId,\n      v\n    });\n    (0, util_1.validateNoLeadingZeroes)({\n      nonce,\n      gasPrice,\n      gasLimit,\n      value,\n      v,\n      r,\n      s\n    });\n    const emptyAccessList = [];\n    return new AccessListEIP2930Transaction({\n      chainId: (0, util_1.bufferToBigInt)(chainId),\n      nonce,\n      gasPrice,\n      gasLimit,\n      to,\n      value,\n      data,\n      accessList: accessList ?? emptyAccessList,\n      v: v !== undefined ? (0, util_1.bufferToBigInt)(v) : undefined,\n      r,\n      s\n    }, opts);\n  }\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee() {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n    let cost = super.getDataFee();\n    cost += BigInt(util_2.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: cost,\n        hardfork: this.common.hardfork()\n      };\n    }\n    return cost;\n  }\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  getUpfrontCost() {\n    return this.gasLimit * this.gasPrice + this.value;\n  }\n  /**\n   * Returns a Buffer Array of the raw Buffers of the EIP-2930 transaction, in order.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   *\n   * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n   */\n  raw() {\n    return [(0, util_1.bigIntToUnpaddedBuffer)(this.chainId), (0, util_1.bigIntToUnpaddedBuffer)(this.nonce), (0, util_1.bigIntToUnpaddedBuffer)(this.gasPrice), (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), (0, util_1.bigIntToUnpaddedBuffer)(this.value), this.data, this.accessList, this.v !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.v) : Buffer.from([]), this.r !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.r) : Buffer.from([]), this.s !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.s) : Buffer.from([])];\n  }\n  /**\n   * Returns the serialized encoding of the EIP-2930 transaction.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceding and concatenated to\n   * the RLP encoding of the values.\n   */\n  serialize() {\n    const base = this.raw();\n    return Buffer.concat([TRANSACTION_TYPE_BUFFER, Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(base)))]);\n  }\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n  getMessageToSign() {\n    let hashMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const base = this.raw().slice(0, 8);\n    const message = Buffer.concat([TRANSACTION_TYPE_BUFFER, Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(base)))]);\n    if (hashMessage) {\n      return Buffer.from((0, keccak_1.keccak256)(message));\n    } else {\n      return message;\n    }\n  }\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  hash() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n      throw new Error(msg);\n    }\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = Buffer.from((0, keccak_1.keccak256)(this.serialize()));\n      }\n      return this.cache.hash;\n    }\n    return Buffer.from((0, keccak_1.keccak256)(this.serialize()));\n  }\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  getMessageToVerifySignature() {\n    return this.getMessageToSign();\n  }\n  /**\n   * Returns the public key of the sender\n   */\n  getSenderPublicKey() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call this method if transaction is not signed');\n      throw new Error(msg);\n    }\n    const msgHash = this.getMessageToVerifySignature();\n    const {\n      v,\n      r,\n      s\n    } = this;\n    this._validateHighS();\n    try {\n      return (0, util_1.ecrecover)(msgHash, v + BigInt(27),\n      // Recover the 27 which was stripped from ecsign\n      (0, util_1.bigIntToUnpaddedBuffer)(r), (0, util_1.bigIntToUnpaddedBuffer)(s));\n    } catch (e) {\n      const msg = this._errorMsg('Invalid Signature');\n      throw new Error(msg);\n    }\n  }\n  _processSignature(v, r, s) {\n    const opts = {\n      ...this.txOptions,\n      common: this.common\n    };\n    return AccessListEIP2930Transaction.fromTxData({\n      chainId: this.chainId,\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      accessList: this.accessList,\n      v: v - BigInt(27),\n      r: (0, util_1.bufferToBigInt)(r),\n      s: (0, util_1.bufferToBigInt)(s)\n    }, opts);\n  }\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n  toJSON() {\n    const accessListJSON = util_2.AccessLists.getAccessListJSON(this.accessList);\n    return {\n      chainId: (0, util_1.bigIntToHex)(this.chainId),\n      nonce: (0, util_1.bigIntToHex)(this.nonce),\n      gasPrice: (0, util_1.bigIntToHex)(this.gasPrice),\n      gasLimit: (0, util_1.bigIntToHex)(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: (0, util_1.bigIntToHex)(this.value),\n      data: '0x' + this.data.toString('hex'),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? (0, util_1.bigIntToHex)(this.v) : undefined,\n      r: this.r !== undefined ? (0, util_1.bigIntToHex)(this.r) : undefined,\n      s: this.s !== undefined ? (0, util_1.bigIntToHex)(this.s) : undefined\n    };\n  }\n  /**\n   * Return a compact error string representation of the object\n   */\n  errorStr() {\n    let errorStr = this._getSharedErrorPostfix();\n    // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n    errorStr += ` gasPrice=${this.gasPrice} accessListCount=${this.accessList?.length ?? 0}`;\n    return errorStr;\n  }\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  _errorMsg(msg) {\n    return `${msg} (${this.errorStr()})`;\n  }\n}\nexports.AccessListEIP2930Transaction = AccessListEIP2930Transaction;","map":null,"metadata":{},"sourceType":"script"}