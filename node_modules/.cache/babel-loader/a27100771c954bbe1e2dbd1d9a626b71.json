{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction) {\n  const result = {};\n  for (let key in transaction) {\n    if (transaction[key] == null) {\n      continue;\n    }\n    let value = transaction[key];\n    if (key === \"type\" && value === 0) {\n      continue;\n    }\n    // Quantity-types require no leading zero, unless 0\n    if ({\n      type: true,\n      gasLimit: true,\n      gasPrice: true,\n      maxFeePerGs: true,\n      maxPriorityFeePerGas: true,\n      nonce: true,\n      value: true\n    }[key]) {\n      value = hexValue(hexlify(value));\n    } else if (key === \"accessList\") {\n      value = \"[\" + accessListify(value).map(set => {\n        return `{address:\"${set.address}\",storageKeys:[\"${set.storageKeys.join('\",\"')}\"]}`;\n      }).join(\",\") + \"]\";\n    } else {\n      value = hexlify(value);\n    }\n    result[key] = value;\n  }\n  return result;\n}\nfunction getResult(result) {\n  // getLogs, getHistory have weird success responses\n  if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n    return result.result;\n  }\n  if (result.status != 1 || typeof result.message !== \"string\" || !result.message.match(/^OK/)) {\n    const error = new Error(\"invalid response\");\n    error.result = JSON.stringify(result);\n    if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n      error.throttleRetry = true;\n    }\n    throw error;\n  }\n  return result.result;\n}\nfunction getJsonResult(result) {\n  // This response indicates we are being throttled\n  if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n    const error = new Error(\"throttled response\");\n    error.result = JSON.stringify(result);\n    error.throttleRetry = true;\n    throw error;\n  }\n  if (result.jsonrpc != \"2.0\") {\n    // @TODO: not any\n    const error = new Error(\"invalid response\");\n    error.result = JSON.stringify(result);\n    throw error;\n  }\n  if (result.error) {\n    // @TODO: not any\n    const error = new Error(result.error.message || \"unknown error\");\n    if (result.error.code) {\n      error.code = result.error.code;\n    }\n    if (result.error.data) {\n      error.data = result.error.data;\n    }\n    throw error;\n  }\n  return result.result;\n}\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag) {\n  if (blockTag === \"pending\") {\n    throw new Error(\"pending not supported\");\n  }\n  if (blockTag === \"latest\") {\n    return blockTag;\n  }\n  return parseInt(blockTag.substring(2), 16);\n}\nfunction checkError(method, error, transaction) {\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n    const e = error.error;\n    // Etherscan keeps changing their string\n    if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n      // Etherscan prefixes the data like \"Reverted 0x1234\"\n      let data = e.data;\n      if (data) {\n        data = \"0x\" + data.replace(/^.*0x/i, \"\");\n      }\n      if (isHexString(data)) {\n        return data;\n      }\n      logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n        error,\n        data: \"0x\"\n      });\n    }\n  }\n  // Get the message from any nested error structure\n  let message = error.message;\n  if (error.code === Logger.errors.SERVER_ERROR) {\n    if (error.error && typeof error.error.message === \"string\") {\n      message = error.error.message;\n    } else if (typeof error.body === \"string\") {\n      message = error.body;\n    } else if (typeof error.responseText === \"string\") {\n      message = error.responseText;\n    }\n  }\n  message = (message || \"\").toLowerCase();\n  // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n  if (message.match(/insufficient funds/)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"Transaction with the same hash was already imported.\"\n  if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n  if (message.match(/another transaction with same nonce/)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error,\n      method,\n      transaction\n    });\n  }\n  if (message.match(/execution failed due to an exception|execution reverted/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error,\n      method,\n      transaction\n    });\n  }\n  throw error;\n}\nexport class EtherscanProvider extends BaseProvider {\n  constructor(network, apiKey) {\n    super(network);\n    defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n    defineReadOnly(this, \"apiKey\", apiKey || null);\n  }\n  getBaseUrl() {\n    switch (this.network ? this.network.name : \"invalid\") {\n      case \"homestead\":\n        return \"https:/\\/api.etherscan.io\";\n      case \"goerli\":\n        return \"https:/\\/api-goerli.etherscan.io\";\n      case \"sepolia\":\n        return \"https:/\\/api-sepolia.etherscan.io\";\n      case \"matic\":\n        return \"https:/\\/api.polygonscan.com\";\n      case \"maticmum\":\n        return \"https:/\\/api-testnet.polygonscan.com\";\n      case \"arbitrum\":\n        return \"https:/\\/api.arbiscan.io\";\n      case \"arbitrum-goerli\":\n        return \"https:/\\/api-goerli.arbiscan.io\";\n      case \"optimism\":\n        return \"https:/\\/api-optimistic.etherscan.io\";\n      case \"optimism-goerli\":\n        return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n      default:\n    }\n    return logger.throwArgumentError(\"unsupported network\", \"network\", this.network.name);\n  }\n  getUrl(module, params) {\n    const query = Object.keys(params).reduce((accum, key) => {\n      const value = params[key];\n      if (value != null) {\n        accum += `&${key}=${value}`;\n      }\n      return accum;\n    }, \"\");\n    const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : \"\";\n    return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;\n  }\n  getPostUrl() {\n    return `${this.baseUrl}/api`;\n  }\n  getPostData(module, params) {\n    params.module = module;\n    params.apikey = this.apiKey;\n    return params;\n  }\n  fetch(module, params, post) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = post ? this.getPostUrl() : this.getUrl(module, params);\n      const payload = post ? this.getPostData(module, params) : null;\n      const procFunc = module === \"proxy\" ? getJsonResult : getResult;\n      this.emit(\"debug\", {\n        action: \"request\",\n        request: url,\n        provider: this\n      });\n      const connection = {\n        url: url,\n        throttleSlotInterval: 1000,\n        throttleCallback: (attempt, url) => {\n          if (this.isCommunityResource()) {\n            showThrottleMessage();\n          }\n          return Promise.resolve(true);\n        }\n      };\n      let payloadStr = null;\n      if (payload) {\n        connection.headers = {\n          \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n        };\n        payloadStr = Object.keys(payload).map(key => {\n          return `${key}=${payload[key]}`;\n        }).join(\"&\");\n      }\n      const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);\n      this.emit(\"debug\", {\n        action: \"response\",\n        request: url,\n        response: deepCopy(result),\n        provider: this\n      });\n      return result;\n    });\n  }\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.network;\n    });\n  }\n  perform(method, params) {\n    const _super = Object.create(null, {\n      perform: {\n        get: () => super.perform\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      switch (method) {\n        case \"getBlockNumber\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_blockNumber\"\n          });\n        case \"getGasPrice\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_gasPrice\"\n          });\n        case \"getBalance\":\n          // Returns base-10 result\n          return this.fetch(\"account\", {\n            action: \"balance\",\n            address: params.address,\n            tag: params.blockTag\n          });\n        case \"getTransactionCount\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getTransactionCount\",\n            address: params.address,\n            tag: params.blockTag\n          });\n        case \"getCode\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getCode\",\n            address: params.address,\n            tag: params.blockTag\n          });\n        case \"getStorageAt\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getStorageAt\",\n            address: params.address,\n            position: params.position,\n            tag: params.blockTag\n          });\n        case \"sendTransaction\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_sendRawTransaction\",\n            hex: params.signedTransaction\n          }, true).catch(error => {\n            return checkError(\"sendTransaction\", error, params.signedTransaction);\n          });\n        case \"getBlock\":\n          if (params.blockTag) {\n            return this.fetch(\"proxy\", {\n              action: \"eth_getBlockByNumber\",\n              tag: params.blockTag,\n              boolean: params.includeTransactions ? \"true\" : \"false\"\n            });\n          }\n          throw new Error(\"getBlock by blockHash not implemented\");\n        case \"getTransaction\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getTransactionByHash\",\n            txhash: params.transactionHash\n          });\n        case \"getTransactionReceipt\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getTransactionReceipt\",\n            txhash: params.transactionHash\n          });\n        case \"call\":\n          {\n            if (params.blockTag !== \"latest\") {\n              throw new Error(\"EtherscanProvider does not support blockTag for call\");\n            }\n            const postData = getTransactionPostData(params.transaction);\n            postData.module = \"proxy\";\n            postData.action = \"eth_call\";\n            try {\n              return yield this.fetch(\"proxy\", postData, true);\n            } catch (error) {\n              return checkError(\"call\", error, params.transaction);\n            }\n          }\n        case \"estimateGas\":\n          {\n            const postData = getTransactionPostData(params.transaction);\n            postData.module = \"proxy\";\n            postData.action = \"eth_estimateGas\";\n            try {\n              return yield this.fetch(\"proxy\", postData, true);\n            } catch (error) {\n              return checkError(\"estimateGas\", error, params.transaction);\n            }\n          }\n        case \"getLogs\":\n          {\n            const args = {\n              action: \"getLogs\"\n            };\n            if (params.filter.fromBlock) {\n              args.fromBlock = checkLogTag(params.filter.fromBlock);\n            }\n            if (params.filter.toBlock) {\n              args.toBlock = checkLogTag(params.filter.toBlock);\n            }\n            if (params.filter.address) {\n              args.address = params.filter.address;\n            }\n            // @TODO: We can handle slightly more complicated logs using the logs API\n            if (params.filter.topics && params.filter.topics.length > 0) {\n              if (params.filter.topics.length > 1) {\n                logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  topics: params.filter.topics\n                });\n              }\n              if (params.filter.topics.length === 1) {\n                const topic0 = params.filter.topics[0];\n                if (typeof topic0 !== \"string\" || topic0.length !== 66) {\n                  logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    topic0: topic0\n                  });\n                }\n                args.topic0 = topic0;\n              }\n            }\n            const logs = yield this.fetch(\"logs\", args);\n            // Cache txHash => blockHash\n            let blocks = {};\n            // Add any missing blockHash to the logs\n            for (let i = 0; i < logs.length; i++) {\n              const log = logs[i];\n              if (log.blockHash != null) {\n                continue;\n              }\n              if (blocks[log.blockNumber] == null) {\n                const block = yield this.getBlock(log.blockNumber);\n                if (block) {\n                  blocks[log.blockNumber] = block.hash;\n                }\n              }\n              log.blockHash = blocks[log.blockNumber];\n            }\n            return logs;\n          }\n        case \"getEtherPrice\":\n          if (this.network.name !== \"homestead\") {\n            return 0.0;\n          }\n          return parseFloat((yield this.fetch(\"stats\", {\n            action: \"ethprice\"\n          })).ethusd);\n        default:\n          break;\n      }\n      return _super.perform.call(this, method, params);\n    });\n  }\n  // Note: The `page` page parameter only allows pagination within the\n  //       10,000 window available without a page and offset parameter\n  //       Error: Result window is too large, PageNo x Offset size must\n  //              be less than or equal to 10000\n  getHistory(addressOrName, startBlock, endBlock) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const params = {\n        action: \"txlist\",\n        address: yield this.resolveName(addressOrName),\n        startblock: startBlock == null ? 0 : startBlock,\n        endblock: endBlock == null ? 99999999 : endBlock,\n        sort: \"asc\"\n      };\n      const result = yield this.fetch(\"account\", params);\n      return result.map(tx => {\n        [\"contractAddress\", \"to\"].forEach(function (key) {\n          if (tx[key] == \"\") {\n            delete tx[key];\n          }\n        });\n        if (tx.creates == null && tx.contractAddress != null) {\n          tx.creates = tx.contractAddress;\n        }\n        const item = this.formatter.transactionResponse(tx);\n        if (tx.timeStamp) {\n          item.timestamp = parseInt(tx.timeStamp);\n        }\n        return item;\n      });\n    });\n  }\n  isCommunityResource() {\n    return this.apiKey == null;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}