{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {}\nexport class TransactionDescription extends Description {}\nexport class ErrorDescription extends Description {}\nexport class Indexed extends Description {\n  static isIndexed(value) {\n    return !!(value && value._isIndexed);\n  }\n}\nconst BuiltinErrors = {\n  \"0x08c379a0\": {\n    signature: \"Error(string)\",\n    name: \"Error\",\n    inputs: [\"string\"],\n    reason: true\n  },\n  \"0x4e487b71\": {\n    signature: \"Panic(uint256)\",\n    name: \"Panic\",\n    inputs: [\"uint256\"]\n  }\n};\nfunction wrapAccessError(property, error) {\n  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n  wrap.error = error;\n  return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n  constructor(fragments) {\n    let abi = [];\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n    defineReadOnly(this, \"fragments\", abi.map(fragment => {\n      return Fragment.from(fragment);\n    }).filter(fragment => fragment != null));\n    defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {});\n    // Add all fragments by their signature\n    this.fragments.forEach(fragment => {\n      let bucket = null;\n      switch (fragment.type) {\n        case \"constructor\":\n          if (this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          }\n          //checkNames(fragment, \"input\", fragment.inputs);\n          defineReadOnly(this, \"deploy\", fragment);\n          return;\n        case \"function\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n          bucket = this.functions;\n          break;\n        case \"event\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          bucket = this.events;\n          break;\n        case \"error\":\n          bucket = this.errors;\n          break;\n        default:\n          return;\n      }\n      let signature = fragment.format();\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n      bucket[signature] = fragment;\n    });\n    // If we do not have a constructor add a default\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n  format(format) {\n    if (!format) {\n      format = FormatTypes.full;\n    }\n    if (format === FormatTypes.sighash) {\n      logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n    }\n    const abi = this.fragments.map(fragment => fragment.format(format));\n    // We need to re-bundle the JSON fragments a bit\n    if (format === FormatTypes.json) {\n      return JSON.stringify(abi.map(j => JSON.parse(j)));\n    }\n    return abi;\n  }\n  // Sub-classes can override these to handle other blockchains\n  static getAbiCoder() {\n    return defaultAbiCoder;\n  }\n  static getAddress(address) {\n    return getAddress(address);\n  }\n  static getSighash(fragment) {\n    return hexDataSlice(id(fragment.format()), 0, 4);\n  }\n  static getEventTopic(eventFragment) {\n    return id(eventFragment.format());\n  }\n  // Find a function definition by any means necessary (unless it is ambiguous)\n  getFunction(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      for (const name in this.functions) {\n        if (nameOrSignatureOrSighash === this.getSighash(name)) {\n          return this.functions[name];\n        }\n      }\n      logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.functions).filter(f => f.split(\"(\" /* fix:) */)[0] === name);\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching function\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n      }\n      return this.functions[matching[0]];\n    }\n    // Normalize the signature and lookup the function\n    const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n    if (!result) {\n      logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n    }\n    return result;\n  }\n  // Find an event definition by any means necessary (unless it is ambiguous)\n  getEvent(nameOrSignatureOrTopic) {\n    if (isHexString(nameOrSignatureOrTopic)) {\n      const topichash = nameOrSignatureOrTopic.toLowerCase();\n      for (const name in this.events) {\n        if (topichash === this.getEventTopic(name)) {\n          return this.events[name];\n        }\n      }\n      logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrTopic.trim();\n      const matching = Object.keys(this.events).filter(f => f.split(\"(\" /* fix:) */)[0] === name);\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching event\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n      }\n      return this.events[matching[0]];\n    }\n    // Normalize the signature and lookup the function\n    const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n    if (!result) {\n      logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n    }\n    return result;\n  }\n  // Find a function definition by any means necessary (unless it is ambiguous)\n  getError(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      const getSighash = getStatic(this.constructor, \"getSighash\");\n      for (const name in this.errors) {\n        const error = this.errors[name];\n        if (nameOrSignatureOrSighash === getSighash(error)) {\n          return this.errors[name];\n        }\n      }\n      logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.errors).filter(f => f.split(\"(\" /* fix:) */)[0] === name);\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching error\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n      }\n      return this.errors[matching[0]];\n    }\n    // Normalize the signature and lookup the function\n    const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n    if (!result) {\n      logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n    }\n    return result;\n  }\n  // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n  getSighash(fragment) {\n    if (typeof fragment === \"string\") {\n      try {\n        fragment = this.getFunction(fragment);\n      } catch (error) {\n        try {\n          fragment = this.getError(fragment);\n        } catch (_) {\n          throw error;\n        }\n      }\n    }\n    return getStatic(this.constructor, \"getSighash\")(fragment);\n  }\n  // Get the topic (the bytes32 hash) used by Solidity to identify an event\n  getEventTopic(eventFragment) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n  }\n  _decodeParams(params, data) {\n    return this._abiCoder.decode(params, data);\n  }\n  _encodeParams(params, values) {\n    return this._abiCoder.encode(params, values);\n  }\n  encodeDeploy(values) {\n    return this._encodeParams(this.deploy.inputs, values || []);\n  }\n  decodeErrorResult(fragment, data) {\n    if (typeof fragment === \"string\") {\n      fragment = this.getError(fragment);\n    }\n    const bytes = arrayify(data);\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n      logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, \"data\", hexlify(bytes));\n    }\n    return this._decodeParams(fragment.inputs, bytes.slice(4));\n  }\n  encodeErrorResult(fragment, values) {\n    if (typeof fragment === \"string\") {\n      fragment = this.getError(fragment);\n    }\n    return hexlify(concat([this.getSighash(fragment), this._encodeParams(fragment.inputs, values || [])]));\n  }\n  // Decode the data for a function call (e.g. tx.data)\n  decodeFunctionData(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    const bytes = arrayify(data);\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n      logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n    }\n    return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n  }\n  // Encode the data for a function call (e.g. tx.data)\n  encodeFunctionData(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n  }\n  // Decode the result from a function call (e.g. from eth_call)\n  decodeFunctionResult(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    let bytes = arrayify(data);\n    let reason = null;\n    let message = \"\";\n    let errorArgs = null;\n    let errorName = null;\n    let errorSignature = null;\n    switch (bytes.length % this._abiCoder._getWordSize()) {\n      case 0:\n        try {\n          return this._abiCoder.decode(functionFragment.outputs, bytes);\n        } catch (error) {}\n        break;\n      case 4:\n        {\n          const selector = hexlify(bytes.slice(0, 4));\n          const builtin = BuiltinErrors[selector];\n          if (builtin) {\n            errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n            errorName = builtin.name;\n            errorSignature = builtin.signature;\n            if (builtin.reason) {\n              reason = errorArgs[0];\n            }\n            if (errorName === \"Error\") {\n              message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;\n            } else if (errorName === \"Panic\") {\n              message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;\n            }\n          } else {\n            try {\n              const error = this.getError(selector);\n              errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n              errorName = error.name;\n              errorSignature = error.format();\n            } catch (error) {}\n          }\n          break;\n        }\n    }\n    return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n      method: functionFragment.format(),\n      data: hexlify(data),\n      errorArgs,\n      errorName,\n      errorSignature,\n      reason\n    });\n  }\n  // Encode the result for a function call (e.g. for eth_call)\n  encodeFunctionResult(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n  }\n  // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n  encodeFilterTopics(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    if (values.length > eventFragment.inputs.length) {\n      logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n        argument: \"values\",\n        value: values\n      });\n    }\n    let topics = [];\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n    const encodeTopic = (param, value) => {\n      if (param.type === \"string\") {\n        return id(value);\n      } else if (param.type === \"bytes\") {\n        return keccak256(hexlify(value));\n      }\n      if (param.type === \"bool\" && typeof value === \"boolean\") {\n        value = value ? \"0x01\" : \"0x00\";\n      }\n      if (param.type.match(/^u?int/)) {\n        value = BigNumber.from(value).toHexString();\n      }\n      // Check addresses are valid\n      if (param.type === \"address\") {\n        this._abiCoder.encode([\"address\"], [value]);\n      }\n      return hexZeroPad(hexlify(value), 32);\n    };\n    values.forEach((value, index) => {\n      let param = eventFragment.inputs[index];\n      if (!param.indexed) {\n        if (value != null) {\n          logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n        }\n        return;\n      }\n      if (value == null) {\n        topics.push(null);\n      } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n        logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n      } else if (Array.isArray(value)) {\n        topics.push(value.map(value => encodeTopic(param, value)));\n      } else {\n        topics.push(encodeTopic(param, value));\n      }\n    });\n    // Trim off trailing nulls\n    while (topics.length && topics[topics.length - 1] === null) {\n      topics.pop();\n    }\n    return topics;\n  }\n  encodeEventLog(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    const topics = [];\n    const dataTypes = [];\n    const dataValues = [];\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n    if (values.length !== eventFragment.inputs.length) {\n      logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n    }\n    eventFragment.inputs.forEach((param, index) => {\n      const value = values[index];\n      if (param.indexed) {\n        if (param.type === \"string\") {\n          topics.push(id(value));\n        } else if (param.type === \"bytes\") {\n          topics.push(keccak256(value));\n        } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n          // @TODO\n          throw new Error(\"not implemented\");\n        } else {\n          topics.push(this._abiCoder.encode([param.type], [value]));\n        }\n      } else {\n        dataTypes.push(param);\n        dataValues.push(value);\n      }\n    });\n    return {\n      data: this._abiCoder.encode(dataTypes, dataValues),\n      topics: topics\n    };\n  }\n  // Decode a filter for the event and the search criteria\n  decodeEventLog(eventFragment, data, topics) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    if (topics != null && !eventFragment.anonymous) {\n      let topicHash = this.getEventTopic(eventFragment);\n      if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n        logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"topics[0]\",\n          expected: topicHash,\n          value: topics[0]\n        });\n      }\n      topics = topics.slice(1);\n    }\n    let indexed = [];\n    let nonIndexed = [];\n    let dynamic = [];\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n          indexed.push(ParamType.fromObject({\n            type: \"bytes32\",\n            name: param.name\n          }));\n          dynamic.push(true);\n        } else {\n          indexed.push(param);\n          dynamic.push(false);\n        }\n      } else {\n        nonIndexed.push(param);\n        dynamic.push(false);\n      }\n    });\n    let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n    let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n    let result = [];\n    let nonIndexedIndex = 0,\n      indexedIndex = 0;\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (resultIndexed == null) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: null\n          });\n        } else if (dynamic[index]) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: resultIndexed[indexedIndex++]\n          });\n        } else {\n          try {\n            result[index] = resultIndexed[indexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        }\n      } else {\n        try {\n          result[index] = resultNonIndexed[nonIndexedIndex++];\n        } catch (error) {\n          result[index] = error;\n        }\n      }\n      // Add the keyword argument if named and safe\n      if (param.name && result[param.name] == null) {\n        const value = result[index];\n        // Make error named values throw on access\n        if (value instanceof Error) {\n          Object.defineProperty(result, param.name, {\n            enumerable: true,\n            get: () => {\n              throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);\n            }\n          });\n        } else {\n          result[param.name] = value;\n        }\n      }\n    });\n    // Make all error indexed values throw on access\n    for (let i = 0; i < result.length; i++) {\n      const value = result[i];\n      if (value instanceof Error) {\n        Object.defineProperty(result, i, {\n          enumerable: true,\n          get: () => {\n            throw wrapAccessError(`index ${i}`, value);\n          }\n        });\n      }\n    }\n    return Object.freeze(result);\n  }\n  // Given a transaction, find the matching function fragment (if any) and\n  // determine all its properties and call parameters\n  parseTransaction(tx) {\n    let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n    if (!fragment) {\n      return null;\n    }\n    return new TransactionDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n      functionFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment),\n      value: BigNumber.from(tx.value || \"0\")\n    });\n  }\n  // @TODO\n  //parseCallResult(data: BytesLike): ??\n  // Given an event log, find the matching event fragment (if any) and\n  // determine all its properties and values\n  parseLog(log) {\n    let fragment = this.getEvent(log.topics[0]);\n    if (!fragment || fragment.anonymous) {\n      return null;\n    }\n    // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n    //        Probably not, because just because it is the only event in the ABI does\n    //        not mean we have the full ABI; maybe just a fragment?\n    return new LogDescription({\n      eventFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      topic: this.getEventTopic(fragment),\n      args: this.decodeEventLog(fragment, log.data, log.topics)\n    });\n  }\n  parseError(data) {\n    const hexData = hexlify(data);\n    let fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n    if (!fragment) {\n      return null;\n    }\n    return new ErrorDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n      errorFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment)\n    });\n  }\n  /*\n  static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n      if (Interface.isInterface(value)) {\n          return value;\n      }\n      if (typeof(value) === \"string\") {\n          return new Interface(JSON.parse(value));\n      }\n      return new Interface(value);\n  }\n  */\n  static isInterface(value) {\n    return !!(value && value._isInterface);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}