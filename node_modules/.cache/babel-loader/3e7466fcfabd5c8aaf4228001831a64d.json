{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { arrayify } from \"@ethersproject/bytes\";\nexport function getUrl(href, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (options == null) {\n      options = {};\n    }\n    const request = {\n      method: options.method || \"GET\",\n      headers: options.headers || {},\n      body: options.body || undefined\n    };\n    if (options.skipFetchSetup !== true) {\n      request.mode = \"cors\"; // no-cors, cors, *same-origin\n      request.cache = \"no-cache\"; // *default, no-cache, reload, force-cache, only-if-cached\n      request.credentials = \"same-origin\"; // include, *same-origin, omit\n      request.redirect = \"follow\"; // manual, *follow, error\n      request.referrer = \"client\"; // no-referrer, *client\n    }\n\n    ;\n    if (options.fetchOptions != null) {\n      const opts = options.fetchOptions;\n      if (opts.mode) {\n        request.mode = opts.mode;\n      }\n      if (opts.cache) {\n        request.cache = opts.cache;\n      }\n      if (opts.credentials) {\n        request.credentials = opts.credentials;\n      }\n      if (opts.redirect) {\n        request.redirect = opts.redirect;\n      }\n      if (opts.referrer) {\n        request.referrer = opts.referrer;\n      }\n    }\n    const response = yield fetch(href, request);\n    const body = yield response.arrayBuffer();\n    const headers = {};\n    if (response.headers.forEach) {\n      response.headers.forEach((value, key) => {\n        headers[key.toLowerCase()] = value;\n      });\n    } else {\n      response.headers.keys().forEach(key => {\n        headers[key.toLowerCase()] = response.headers.get(key);\n      });\n    }\n    return {\n      headers: headers,\n      statusCode: response.status,\n      statusMessage: response.statusText,\n      body: arrayify(new Uint8Array(body))\n    };\n  });\n}","map":null,"metadata":{},"sourceType":"module"}